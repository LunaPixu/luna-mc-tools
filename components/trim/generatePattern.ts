import JSZip from "jszip";
import { PackMCMeta, Packs } from "./pack";

export interface PatternValues {
  name: string;
  ingredient: string;
}

interface PatternData {
  asset_id: string;
  description: {
    translate: string;
  };
  template_item: string;
}

function collapse(name: string): string {
  if (!name) return "";
  let out = name.replace(/ /gm,"_");
  return out.replace(/[^a-z0-9_-]/gmi,"").toLowerCase();
}

class TrimAtlas {
  sources: [
    {
      type: "paletted_permutations";
      textures: string[];
      palette_key: "trims/color_palettes/trim_palette";
      permutations: {
        quartz: "trims/color_palettes/quartz";
        iron: "trims/color_palettes/iron";
        gold: "trims/color_palettes/gold";
        diamond: "trims/color_palettes/diamond";
        netherite: "trims/color_palettes/netherite";
        redstone: "trims/color_palettes/redstone";
        copper: "trims/color_palettes/copper";
        emerald: "trims/color_palettes/emerald";
        lapis: "trims/color_palettes/lapis";
        amethyst: "trims/color_palettes/amethyst";
        iron_darker: "trims/color_palettes/iron_darker";
        gold_darker: "trims/color_palettes/gold_darker";
        diamond_darker: "trims/color_palettes/diamond_darker";
        netherite_darker: "trims/color_palettes/netherite_darker";
        [key: string]: string;
      };
    }
  ];

  constructor(trimID: string) {
    this.sources = [
      {
        type: "paletted_permutations",
        textures: [],
        palette_key: "trims/color_palettes/trim_palette",
        permutations: {
          quartz: "trims/color_palettes/quartz",
          iron: "trims/color_palettes/iron",
          gold: "trims/color_palettes/gold",
          diamond: "trims/color_palettes/diamond",
          netherite: "trims/color_palettes/netherite",
          redstone: "trims/color_palettes/redstone",
          copper: "trims/color_palettes/copper",
          emerald: "trims/color_palettes/emerald",
          lapis: "trims/color_palettes/lapis",
          amethyst: "trims/color_palettes/amethyst",
          iron_darker: "trims/color_palettes/iron_darker",
          gold_darker: "trims/color_palettes/gold_darker",
          diamond_darker: "trims/color_palettes/diamond_darker",
          netherite_darker: "trims/color_palettes/netherite_darker",
        }
      }
    ];
    this.sources[0].textures.push(`lunamct:trims/models/armor/${trimID}`);
    this.sources[0].textures.push(`lunamct:trims/models/armor/${trimID}_leggings`);
  }
}

class TrimRecipe {
  type: "minecraft:smithing_trim";
  addition: {
    tag: "minecraft:trim_materials";
  };
  base: {
    tag: "minecraft:trimmable_armor";
  };
  template: {
    item: string;
  };

  constructor(templateItem: string) {
    this.type = "minecraft:smithing_trim";
    this.addition = {
      tag: "minecraft:trim_materials",
    };
    this.base = {
      tag: "minecraft:trimmable_armor",
    };
    this.template = {
      item: templateItem,
    };
  }
};

const readme =
`This resource pack has been generated by Luna's Minecraft Tools! https://luna-minecraft-tools.vercel.app/

This resource pack is not a completed resource pack!
All the relevant .json files have been automatically generated but you still need to provide your own textures.
Please add your textures to assets/lunamct/textures/trims/models/armor/ in this pack.`;

export function generatePattern(values: PatternValues, mcVersion: string): Packs {
  if (!values.name) { // This and the block below should never trigger either
    throw "Trim pattern has no name";
  }
  if (!values.ingredient) {
    throw "No ingredient was provided.";
  }

  const assetName = collapse(values.name);
  const patternData: PatternData = {
    asset_id: `lunamct:${assetName}`,
    description: {
      translate: `trim_pattern.lunamct.${assetName}`
    },
    template_item: values.ingredient,
  };

  const dataMCMeta: PackMCMeta = {
    pack: {
      description: `${values.name} trim pattern generated by Luna MCT`,
      pack_format: 15,
    }
  };

  const dataPack = new JSZip();
  dataPack.file("pack.mcmeta", JSON.stringify(dataMCMeta, null, "  "));
  dataPack.file(`data/lunamct/trim_pattern/${assetName}.json`, JSON.stringify(patternData, null, "  "));
  dataPack.file(`data/lunamct/recipes/${assetName}_armor_trim.json`, JSON.stringify(new TrimRecipe(patternData.template_item), null, "  "));
  dataPack.file("data/minecraft/tags/items/trim_templates.json", JSON.stringify({values: [patternData.template_item]}, null, "  "));

  const resourceMCMeta: PackMCMeta = {
    pack: {
      description: `${values.name} trim pattern generated by Luna MCT`,
      pack_format: 15,
    }
  };

  const resourcePack = new JSZip();
  resourcePack.file("pack.mcmeta", JSON.stringify(resourceMCMeta, null, "  "));
  resourcePack.file("README.txt", readme);
  resourcePack.file("assets/minecraft/atlases/armor_trims.json", JSON.stringify(new TrimAtlas(assetName), null, "  "));

  resourcePack.file("assets/lunamct/textures/trims/models/armor/add_textures_here.txt", `Please add textures named "${assetName}.png" and "${assetName}_leggings.png" to this folder.`);
  
  resourcePack.file("assets/lunamct/lang/en_us.json", JSON.stringify({[patternData.description.translate]: `${values.name} Armor Trim`}, null, "  "));

  return {
    dataPack: {
      name: assetName + "_pattern-data",
      zip: dataPack,
    },
    resourcePack: {
      name: assetName + "_pattern-resources",
      zip: resourcePack,
    },
  };
}